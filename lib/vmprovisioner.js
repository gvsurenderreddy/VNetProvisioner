// Generated by CoffeeScript 1.7.1
(function() {
  var QuaggaService, StormData, StormRegistry, async, extend, ip, openvpnService, request, util, vmprovision;

  StormRegistry = require('stormregistry');

  StormData = require('stormdata');

  util = require('util');

  request = require('request-json');

  extend = require('util')._extend;

  ip = require('ip');

  async = require('async');

  QuaggaService = require('./quaggaservice');

  openvpnService = require('./openvpnservice');

  vmprovision = (function() {
    function vmprovision(vmdata) {
      this.uuid = vmdata.id;
      this.linkstats = [];
      this.routestats = [];
      this.osstatus = [];
      this.vmdata = vmdata;
      this.uuid = vmdata.id;
      this.reachable = false;
      util.log("intput vmdata" + JSON.stringify(this.vmdata));
      this.serviceobj = {};
      this.findmgmtip();
    }

    vmprovision.prototype.findmgmtip = function() {
      var i, _i, _len, _ref, _results;
      _ref = this.vmdata.ifmap;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.type === "mgmt") {
          this.mgmtip = i.ipaddress;
          _results.push(console.log("mgmtip" + this.mgmtip));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    vmprovision.prototype.configLinkChars = function(callback) {
      var cfg, client, i, _i, _len, _ref;
      _ref = this.vmdata.ifmap;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.type === "wan") {
          this.url = "http://" + this.mgmtip + ":5000";
          client = request.newClient(this.url);
          cfg = {
            ifname: i.ifname,
            bandwidth: i.config.bandwidth,
            latency: i.config.latency,
            jitter: i.config.jitter,
            pktloss: i.config.pktloss
          };
          util.log("linkconfig input is " + JSON.stringify(cfg));
          client.post("/linkconfig", cfg, (function(_this) {
            return function(err, res, body) {
              if (res != null) {
                if (res.statusCode != null) {
                  util.log("get result status code res statuscode" + res.statusCode);
                }
                if (body != null) {
                  _this.linkstats = body;
                }
                return util.log("linkconfig result " + JSON.stringify(_this.linkstats));
              }
            };
          })(this));
        }
      }
      return callback(true);
    };

    vmprovision.prototype.getLinkStats = function(callback) {
      var client;
      this.url = "http://" + this.mgmtip + ":5000";
      client = request.newClient(this.url);
      return client.get("/netstats/link", (function(_this) {
        return function(err, res, body) {
          if (res != null) {
            if (res.statusCode != null) {
              util.log("get result status code res statuscode" + res.statusCode);
            }
            if (body != null) {
              _this.linkstats = body;
            }
            util.log("linkstats " + JSON.stringify(_this.linkstats));
            return callback(_this.linkstats);
          }
        };
      })(this));
    };

    vmprovision.prototype.getRouteStats = function(callback) {
      var client;
      this.url = "http://" + this.mgmtip + ":5000";
      client = request.newClient(this.url);
      return client.get("/netstats/route", (function(_this) {
        return function(err, res, body) {
          if (res != null) {
            if (res.statusCode != null) {
              util.log("get result status code res statuscode" + res.statusCode);
            }
            if (body != null) {
              _this.routestats = body;
            }
            return callback(_this.routestats);
          }
        };
      })(this));
    };

    vmprovision.prototype.vmstatus = function(callback) {
      var client;
      util.log("vmstatus is called");
      this.url = "http://" + this.mgmtip + ":5000";
      client = request.newClient(this.url);
      return client.get("/status", (function(_this) {
        return function(err, res, body) {
          if (res != null) {
            if (res.statusCode != null) {
              util.log("get result status code res statuscode" + res.statusCode);
            }
            util.log("inside res condition");
            _this.reachable = true;
            if (body != null) {
              _this.osstatus = body;
            }
            return callback;
          } else {
            _this.reachable = false;
            return callback;
          }
        };
      })(this));
    };

    vmprovision.prototype.statistics = function(callback) {
      util.log("statistics called");
      return this.getLinkStats((function(_this) {
        return function(result) {
          return _this.getRouteStats(function(result1) {
            return callback({
              "linkstats": result,
              "routestats": result1
            });
          });
        };
      })(this));
    };

    vmprovision.prototype.getService = function(serviceid, callback) {
      var obj;
      obj = this.serviceobj[serviceid];
      if (obj != null) {
        return obj.getService((function(_this) {
          return function(res) {
            return callback(res);
          };
        })(this));
      }
    };

    vmprovision.prototype.provision = function(callback) {
      var openvpnobj, quaggaobj, service, _i, _len, _ref;
      if (this.mgmtip == null) {
        return callback({
          id: this.uuid,
          status: "provision-failed",
          reason: "mgmt ip not available"
        });
      }
      this.reachable = false;
      async.until((function(_this) {
        return function() {
          return _this.reachable;
        };
      })(this), (function(_this) {
        return function(repeat) {
          _this.vmstatus(function() {});
          return setTimeout(repeat, 5000);
        };
      })(this), (function(_this) {
        return function(err) {
          util.log("over");
          return callback;
        };
      })(this));
      console.log("Start Provisioning the Services " + JSON.stringify(this.vmdata.Services));
      this.configLinkChars((function(_this) {
        return function(result) {
          return console.log("configLinkChars result " + result);
        };
      })(this));
      _ref = this.vmdata.Services;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        console.log("service" + JSON.stringify(service));
        switch (service.name) {
          case 'quagga':
            quaggaobj = new QuaggaService(this.url, this.vmdata.ifmap);
            service.id = quaggaobj.getuuid();
            quaggaobj.start();
            this.serviceobj[service.id] = quaggaobj;
            break;
          case 'openvpn':
            console.log("openvpns service" + service);
            openvpnobj = new openvpnService(this.url, service.config);
            service.id = openvpnobj.getuuid();
            openvpnobj.start();
            this.serviceobj[service.id] = openvpnobj;
        }
      }
      return callback({
        id: this.uuid,
        data: this.vmdata,
        status: "provisioned"
      });
    };

    return vmprovision;

  })();

  module.exports = vmprovision;

}).call(this);
