// Generated by CoffeeScript 1.7.1
(function() {
  var StormData, StormRegistry, async, extend, ip, quaggaService, request, util, vmprovision;

  StormRegistry = require('stormregistry');

  StormData = require('stormdata');

  util = require('util');

  request = require('request-json');

  extend = require('util')._extend;

  ip = require('ip');

  async = require('async');

  quaggaService = (function() {
    function quaggaService(url, ifmap) {
      var client, i, ifarray, ospfdConfig, ospfnwarray, ripdConfig, ripdnwarray, zebraConfig, _i, _len;
      this.url = url;
      console.log("quaggaservice url is " + this.url);
      console.log("quaggaservice ifmap is " + JSON.stringify(ifmap));
      zebraConfig = {
        "hostname": "zebra",
        "password": "zebra",
        "enable password": "password",
        "log file": "/var/log/quagga/ospfd.log debugging",
        "interfaces": [],
        "iproutes": []
      };
      ospfdConfig = {
        "hostname": "ospf",
        "password": "ospf",
        "enable password": "ospf",
        "log file": "/var/log/quagga/ospfd.log debugging",
        "protocol": {
          "router": "ospf",
          "networks": []
        }
      };
      ripdConfig = {
        "hostname": "rip",
        "password": "rip",
        "enable password": "rip",
        "log file": "/var/log/quagga/ripd.log debugging",
        "protocol": {
          "router": "rip",
          "networks": []
        }
      };
      ifarray = [];
      ospfnwarray = [];
      ripdnwarray = [];
      for (_i = 0, _len = ifmap.length; _i < _len; _i++) {
        i = ifmap[_i];
        if (i.type !== "mgmt") {
          ifarray.push({
            "interface": i.ifname,
            "description": i.brname,
            "ip address": "" + i.ipaddress + "/30",
            "bandwidth": 100000
          });
          ospfnwarray.push({
            "network": "" + i.ipaddress + "/30 area 0"
          });
          ripdnwarray.push({
            "network": i.ifname
          });
        }
      }
      console.log("zebra ifarray array" + JSON.stringify(ifarray));
      console.log("ospfnwarray  " + JSON.stringify(ospfnwarray));
      console.log("ripwarray  " + JSON.stringify(ripdnwarray));
      zebraConfig.interfaces = ifarray;
      ospfdConfig.protocol.networks = ospfnwarray;
      ripdConfig.protocol.networks = ripdnwarray;
      client = request.newClient(this.url);
      client.post("/quagga/zebra", zebraConfig, (function(_this) {
        return function(err, res, body) {
          if (body != null) {
            util.log("post zebra result body  " + JSON.stringify(body));
          }
          if (res.statusCode != null) {
            return util.log("post zebra status code res statuscode" + res.statusCode);
          }
        };
      })(this));
      client.post("/quagga/ospfd", ospfdConfig, (function(_this) {
        return function(err, res, body) {
          if (body != null) {
            util.log("post ospfd result body  " + JSON.stringify(body));
          }
          if (res.statusCode != null) {
            return util.log("post ospfd status code res statuscode" + res.statusCode);
          }
        };
      })(this));
      client.post("/quagga/ripd", ripdConfig, (function(_this) {
        return function(err, res, body) {
          if (body != null) {
            util.log("post ripd result body  " + JSON.stringify(body));
          }
          if (res.statusCode != null) {
            return util.log("post ripd status code res statuscode" + res.statusCode);
          }
        };
      })(this));
    }

    return quaggaService;

  })();

  vmprovision = (function() {
    function vmprovision(vmdata) {
      this.uuid = vmdata.id;
      this.linkstats = [];
      this.routestats = [];
      this.osstatus = [];
      this.vmdata = vmdata;
      this.uuid = vmdata.id;
      util.log("intput vmdata" + JSON.stringify(this.vmdata));
      this.findmgmtip();
    }

    vmprovision.prototype.findmgmtip = function() {
      var i, _i, _len, _ref, _results;
      _ref = this.vmdata.ifmap;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.type === "mgmt") {
          this.mgmtip = i.ipaddress;
          _results.push(console.log("mgmtip" + this.mgmtip));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    vmprovision.prototype.getLinkStats = function(callback) {
      var client;
      this.url = "http://" + this.mgmtip + ":5000";
      client = request.newClient(this.url);
      return client.get("/netstats/link", (function(_this) {
        return function(err, res, body) {
          if (res != null) {
            if (res.statusCode != null) {
              util.log("get result status code res statuscode" + res.statusCode);
            }
            if (body != null) {
              _this.linkstats = body;
            }
            util.log("linkstats " + JSON.stringify(_this.linkstats));
            return callback(_this.linkstats);
          }
        };
      })(this));
    };

    vmprovision.prototype.getRouteStats = function(callback) {
      var client;
      this.url = "http://" + this.mgmtip + ":5000";
      client = request.newClient(this.url);
      return client.get("/netstats/route", (function(_this) {
        return function(err, res, body) {
          if (res != null) {
            if (res.statusCode != null) {
              util.log("get result status code res statuscode" + res.statusCode);
            }
            if (body != null) {
              _this.routestats = body;
            }
            return callback(_this.routestats);
          }
        };
      })(this));
    };

    vmprovision.prototype.vmstatus = function(callback) {
      var client;
      this.url = "http://" + this.mgmtip + ":5000";
      client = request.newClient(this.url);
      return client.get("/status", (function(_this) {
        return function(err, res, body) {
          if (res != null) {
            if (res.statusCode != null) {
              util.log("get result status code res statuscode" + res.statusCode);
            }
            util.log("inside res condition");
            _this.reachable = true;
            if (body != null) {
              _this.osstatus = body;
            }
            return callback;
          } else {
            _this.reachable = false;
            return callback;
          }
        };
      })(this));
    };

    vmprovision.prototype.statistics = function(callback) {
      util.log("statistics called");
      return this.getLinkStats((function(_this) {
        return function(result) {
          return _this.getRouteStats(function(result1) {
            return callback({
              "linkstats": result,
              "routestats": result1
            });
          });
        };
      })(this));
    };

    vmprovision.prototype.provision = function(callback) {
      var quaggaobj, service, _i, _len, _ref;
      if (this.mgmtip == null) {
        return callback(null);
      }
      this.reachable = false;
      async.until((function(_this) {
        return function() {
          return _this.reachable;
        };
      })(this), (function(_this) {
        return function(repeat) {
          _this.vmstatus(function() {});
          return setTimeout(repeat, 5000);
        };
      })(this), (function(_this) {
        return function(err) {
          util.log("over");
          return callback;
        };
      })(this));
      console.log("Services " + JSON.stringify(this.vmdata.Services));
      _ref = this.vmdata.Services;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        console.log("service" + JSON.stringify(service));
        switch (service.name) {
          case 'quagga':
            quaggaobj = new quaggaService(this.url, this.vmdata.ifmap);
        }
      }
      return callback(true);
    };

    return vmprovision;

  })();

  module.exports = vmprovision;

}).call(this);
