// Generated by CoffeeScript 1.9.0
(function() {
  var StormData, StormRegistry, async, extend, ip, openvpnService, request, util, uuid;

  StormRegistry = require('stormregistry');

  StormData = require('stormdata');

  util = require('util');

  request = require('request-json');

  extend = require('util')._extend;

  ip = require('ip');

  async = require('async');

  uuid = require('node-uuid');

  openvpnService = (function() {
    openvpnService.prototype.start = function() {
      var client;
      if (this.openvpnServerConfig != null) {
        client = request.newClient(this.url);
        client.post("/openvpn/server", this.openvpnServerConfig, (function(_this) {
          return function(err, res, body) {
            if (err != null) {
              util.log("post openvpn server Err  " + err);
            }
            if (body != null) {
              util.log("post openvpn result body  " + JSON.stringify(body));
            }
            if ((res != null ? res.statusCode : void 0) != null) {
              return util.log("post openvpn status code res statuscode" + res.statusCode);
            }
          };
        })(this));
      }
      if (this.openvpnClientConfig != null) {
        client = request.newClient(this.url);
        return client.post("/openvpn/client", this.openvpnClientConfig, (function(_this) {
          return function(err, res, body) {
            if (err != null) {
              util.log("post openvpn client Err  " + err);
            }
            if (body != null) {
              util.log("post openvpn result body  " + JSON.stringify(body));
            }
            if ((res != null ? res.statusCode : void 0) != null) {
              return util.log("post openvpn status code res statuscode" + res.statusCode);
            }
          };
        })(this));
      }
    };

    openvpnService.prototype.getService = function(callback) {
      var client;
      client = request.newClient(this.url);
      return client.get("/openvpn/server", (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("get openvpn server Err  " + err);
          }
          if (body != null) {
            util.log("get openvpn result body  " + JSON.stringify(body));
          }
          if ((res != null ? res.statusCode : void 0) != null) {
            util.log("get openvpn status code res statuscode" + res.statusCode);
          }
          return callback(body);
        };
      })(this));
    };

    openvpnService.prototype.stop = function() {};

    openvpnService.prototype.del = function() {};

    openvpnService.prototype.update = function() {};

    openvpnService.prototype.getuuid = function() {
      return this.id;
    };

    function openvpnService(_at_url, config) {
      this.url = _at_url;
      console.log("openvpn url is " + this.url);
      if ((config != null ? config.server : void 0) != null) {
        this.openvpnServerConfig = extend({}, config.server);
      }
      if ((config != null ? config.client : void 0) != null) {
        this.openvpnClientConfig = extend({}, config.server);
      }
      util.log("openvpnServerConfig   " + this.openvpnServerConfig);
      util.log("openvpnClientConfig " + this.openvpnClientConfig);
      this.id = uuid.v4();
    }

    return openvpnService;

  })();

  module.exports = openvpnService;

}).call(this);
