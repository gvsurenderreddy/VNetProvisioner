// Generated by CoffeeScript 1.9.0
(function() {
  var StormData, StormRegistry, async, extend, ip, quaggaService, request, util, uuid;

  StormRegistry = require('stormregistry');

  StormData = require('stormdata');

  util = require('util');

  request = require('request-json');

  extend = require('util')._extend;

  ip = require('ip');

  async = require('async');

  uuid = require('node-uuid');

  quaggaService = (function() {
    quaggaService.prototype.start = function() {
      var client;
      client = request.newClient(this.url);
      client.post("/quagga/zebra", this.config.zebra, (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("post zebra Err  " + err);
          }
          if (body != null) {
            util.log("post zebra result body  " + JSON.stringify(body));
          }
          if ((res != null ? res.statusCode : void 0) != null) {
            return util.log("post zebra status code res statuscode" + res.statusCode);
          }
        };
      })(this));
      return client.post("/quagga/ospfd", this.config.ospfd, (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("post ospfd Err  " + err);
          }
          if (body != null) {
            util.log("post ospfd result body  " + JSON.stringify(body));
          }
          if ((res != null ? res.statusCode : void 0) != null) {
            return util.log("post ospfd status code res statuscode" + res.statusCode);
          }
        };
      })(this));
    };

    quaggaService.prototype.stop = function() {};

    quaggaService.prototype.update = function() {};

    quaggaService.prototype.getuuid = function() {
      return this.id;
    };

    quaggaService.prototype.getService = function(callback) {
      var client;
      client = request.newClient(this.url);
      return client.get("/quagga/zebra", (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("get zebra Err  " + err);
          }
          if (body != null) {
            util.log("get zebra result body  " + JSON.stringify(body));
          }
          if ((res != null ? res.statusCode : void 0) != null) {
            util.log("get zebra status code res statuscode" + res.statusCode);
          }
          return callback(res);
        };
      })(this));
    };

    function quaggaService(_at_url, ifmap) {
      var i, ifarray, ospfnwarray, ripdnwarray, _i, _len;
      this.url = _at_url;
      console.log("quaggaservice url is " + this.url);
      console.log("quaggaservice ifmap is " + JSON.stringify(ifmap));
      this.id = uuid.v4();
      this.config = {
        id: this.id,
        zebra: null,
        ospfd: null,
        ripd: null
      };
      this.config.zebra = {
        "hostname": "zebra",
        "password": "zebra",
        "enable password": "password",
        "log file": "/var/log/zebra.log debugging",
        "interfaces": [],
        "iproutes": []
      };
      this.config.ospfd = {
        "hostname": "ospf",
        "password": "ospf",
        "enable password": "ospf",
        "log file": "/var/log/ospfd.log debugging",
        "protocol": {
          "router": "ospf",
          "networks": []
        }
      };
      this.config.ripd = {
        "hostname": "rip",
        "password": "rip",
        "enable password": "rip",
        "log file": "/var/log/ripd.log debugging",
        "protocol": {
          "router": "rip",
          "networks": []
        }
      };
      ifarray = [];
      ospfnwarray = [];
      ripdnwarray = [];
      for (_i = 0, _len = ifmap.length; _i < _len; _i++) {
        i = ifmap[_i];
        if (i.type === "wan") {
          ifarray.push({
            "interface": i.ifname,
            "description": i.brname,
            "ip address": i.ipaddress + "/30",
            "bandwidth": 100000
          });
          ospfnwarray.push({
            "network": i.ipaddress + "/30 area 0"
          });
          ripdnwarray.push({
            "network": i.ifname
          });
        }
      }
      console.log("zebra ifarray array" + JSON.stringify(ifarray));
      console.log("ospfnwarray  " + JSON.stringify(ospfnwarray));
      console.log("ripwarray  " + JSON.stringify(ripdnwarray));
      this.config.zebra.interfaces = ifarray;
      this.config.ospfd.protocol.networks = ospfnwarray;
      this.config.ripd.protocol.networks = ripdnwarray;
    }

    return quaggaService;

  })();

  module.exports = quaggaService;

}).call(this);
