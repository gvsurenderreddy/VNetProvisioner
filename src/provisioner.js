// Generated by CoffeeScript 1.7.1
var Provisioner, StormData, StormRegistry, async, extend, ip, provisionerData, provisionerRegistry, request, util,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

StormRegistry = require('stormregistry');

StormData = require('stormdata');

util = require('util');

request = require('request-json');

extend = require('util')._extend;

ip = require('ip');

async = require('async');

provisionerData = (function(_super) {
  var schema;

  __extends(provisionerData, _super);

  schema = {
    name: "node",
    type: "object",
    required: true,
    properties: {
      id: {
        type: "string",
        required: true
      },
      name: {
        type: "string",
        required: true
      },
      type: {
        type: "string",
        required: true
      },
      Services: {
        type: "array",
        required: true,
        items: {
          type: "object",
          required: true,
          properties: {
            name: {
              "type": "string",
              "required": true
            },
            enabled: {
              "type": "boolean",
              "required": true
            }
          }
        }
      },
      ifmap: {
        type: "array",
        items: {
          type: "object",
          name: "ifmapp",
          properties: {
            ifname: {
              type: "string",
              "required": true
            },
            hwAddress: {
              type: "string",
              "required": true
            },
            brname: {
              type: "string",
              "required": false
            },
            ipaddress: {
              type: "string",
              "required": true
            },
            netmask: {
              type: "string",
              "required": true
            },
            gateway: {
              tye: "string",
              "required": false
            },
            type: {
              tye: "string",
              "required": true
            }
          }
        }
      }
    }
  };

  function provisionerData(id, data) {
    provisionerData.__super__.constructor.call(this, id, data, schema);
  }

  return provisionerData;

})(StormData);

provisionerRegistry = (function(_super) {
  __extends(provisionerRegistry, _super);

  function provisionerRegistry(filename) {
    this.on('load', function(key, val) {
      var entry;
      console.log("restoring " + key + " with:", val);
      entry = new provisionerData(key, val);
      if (entry != null) {
        entry.saved = true;
        return this.add(entry);
      }
    });
    this.on('removed', function(entry) {
      if (entry.destructor != null) {
        return entry.destructor();
      }
    });
    provisionerRegistry.__super__.constructor.call(this, filename);
  }

  provisionerRegistry.prototype.add = function(data) {
    var entry;
    if (!(data instanceof provisionerData)) {
      return;
    }
    return entry = provisionerRegistry.__super__.add.call(this, data.id, data);
  };

  provisionerRegistry.prototype.update = function(data) {
    return provisionerRegistry.__super__.update.call(this, data.id, data);
  };

  provisionerRegistry.prototype.get = function(key) {
    var entry;
    entry = provisionerRegistry.__super__.get.call(this, key);
    if (entry == null) {
      return;
    }
    if ((entry.data != null) && entry.data instanceof provisionerData) {
      entry.data.id = entry.id;
      return entry.data;
    } else {
      return entry;
    }
  };

  return provisionerRegistry;

})(StormRegistry);

Provisioner = (function() {
  function Provisioner(filename) {
    this.registry = new provisionerRegistry(filename);
    this.registry.on('load', function(key, val) {
      return util.log("Loading key " + key + " with val " + val);
    });
  }

  Provisioner.prototype.list = function(callback) {
    return callback(this.registry.list());
  };

  Provisioner.prototype.get = function(data, callback) {
    return callback(this.registry.get(data));
  };

  Provisioner.prototype.create = function(data, callback) {
    var err, pvdata;
    try {
      return pvdata = new provisionerData(data.id, data);
    } catch (_error) {
      err = _error;
      util.log("invalid schema" + err);
      return callback(new Error("Invalid Input "));
    } finally {
      this.registry.add(pvdata);
      callback({
        "true": "true"
      });
    }
  };

  return Provisioner;

})();

module.exports = new Provisioner('/tmp/provisioner.db');
